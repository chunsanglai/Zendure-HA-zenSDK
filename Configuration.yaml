# Laad standaard set van integraties. Niet verwijderen.
default_config:

# Laad frontend thema's uit de themes-map
frontend:
  themes: !include_dir_merge_named themes

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
template: !include sensors.yaml

input_select:
  zendure_2400_ac_modus_selecteren:
    name: Zendure 2400 AC Modus Selecteren
    icon: mdi:battery-charging-wireless
    options:
      - Standby
      - Handmatig
      - Nul op de meter
      - Alleen slim ontladen
      - Alleen slim opladen
      - Opladen met 2400 watt
      - Ontladen met 2400 watt

input_boolean:
  dynamisch_15_minuten:
    name: Dynamisch 15 Minuten
    icon: mdi:clock-time-three-outline

input_text:
  dynamisch_handmatige_periode:
    name: Dynamisch Handmatige Periode
    icon: mdi:view-grid
    max: 250
    mode: text

  dynamisch_handmatige_periode_morgen:
    name: Dynamisch Handmatige Periode Morgen
    icon: mdi:view-grid
    max: 250
    mode: text

input_number:
  zendure_2400_ac_handmatig_vermogen:
    name: Zendure 2400 AC Handmatig Vermogen
    min: -2400
    max: 2400
    step: 1
    mode: box
    unit_of_measurement: "W"

  dynamisch_minimale_spread:
    name: Dynamisch Minimale Spread
    icon: mdi:percent-box
    min: 0
    max: 100
    step: 1
    unit_of_measurement: '%'
    mode: box

  dynamisch_goedkoopste_x_periode:
    name: Dynamisch Goedkoopste X Periode
    icon: mdi:view-grid-plus
    min: 1
    max: 96
    step: 1
    mode: box

  dynamisch_duurste_x_periode:
    name: Dynamisch Duurste X Periode
    icon: mdi:view-grid-plus
    min: 1
    max: 96
    step: 1
    mode: box

  dynamisch_goedkoopste_x_periode_morgen:
    name: Dynamisch Goedkoopste X Periode Morgen
    icon: mdi:view-grid-plus
    min: 1
    max: 96
    step: 1
    mode: box

  dynamisch_duurste_x_periode_morgen:
    name: Dynamisch Duurste X Periode Morgen
    icon: mdi:view-grid-plus
    min: 1
    max: 96
    step: 1
    mode: box

sensor:
  - platform: statistics
    name: "Zendure 2400 AC Efficiëntie Import (24u gemiddelde)"
    unique_id: zendure_2400_ac_efficientie_import_24u
    entity_id: sensor.zendure_2400_ac_efficientie_import
    state_characteristic: mean
    sampling_size: 86400
    max_age:
      hours: 24

  - platform: statistics
    name: "Zendure 2400 AC Efficiëntie Export (24u gemiddelde)"
    unique_id: zendure_2400_ac_efficientie_export_24u
    entity_id: sensor.zendure_2400_ac_efficientie_export
    state_characteristic: mean
    sampling_size: 86400
    max_age:
      hours: 24

  - platform: integration
    name: "Zendure 2400 AC Energie Import"
    unique_id: zendure_2400_ac_energie_import
    source: sensor.zendure_2400_ac_vermogen_import
    unit_prefix: k
    round: 2
    method: trapezoidal

  - platform: integration
    name: "Zendure 2400 AC Energie Export"
    unique_id: zendure_2400_ac_energie_export
    source: sensor.zendure_2400_ac_vermogen_export
    unit_prefix: k
    round: 2
    method: trapezoidal

template:
  - sensor:
      - name: "Dynamisch Nordpool"
        unique_id: dynamisch_nordpool
        icon: mdi:cash
        unit_of_measurement: "€/kWh"
        state: >-
          {% set nordpool = 'sensor.<NORDPOOL>' %}
          {% set use_15_min = is_state('input_boolean.dynamisch_15_minuten', 'on') %}
          {% if use_15_min %}
            {% set data = state_attr(nordpool, 'raw_today') or [] %}
            {% set nowts = as_timestamp(now()) %}
            {% set current = namespace(val=None) %}
            {% for p in data %}
              {% set s = as_timestamp(as_datetime(p.start)) %}
              {% set e = as_timestamp(as_datetime(p.end)) %}
              {% if nowts >= s and nowts < e %}
                {% set current.val = (p.value) | round(5) %}
              {% endif %}
            {% endfor %}
            {{ current.val if current.val is not none else 'unknown' }}
          {% else %}
            {% set raw = state_attr(nordpool, 'raw_today') %}
            {% set now = now() %}
            {% if raw %}
              {% set current_hour_values = raw 
                | selectattr('start', '>=', now.replace(minute=0, second=0, microsecond=0)) 
                | selectattr('start', '<', now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)) 
                | map(attribute='value') 
                | list %}
              {% if current_hour_values %}
                {{ (current_hour_values | sum / current_hour_values | count) | round(5) }}
              {% else %}
                {{ states(nordpool) }}
              {% endif %}
            {% else %}
              {{ states(nordpool) }}
            {% endif %}
          {% endif %}
        attributes:
          raw_today: >-
            {% set nordpool = 'sensor.<NORDPOOL>' %}
            {% set use_15_min = is_state('input_boolean.dynamisch_15_minuten', 'on') %}
            {% set raw = state_attr(nordpool, 'raw_today') %}
            {% if raw %}
              [
              {% if use_15_min %}
                {% for item in raw %}
                  {
                    "start": "{{ item.start.isoformat() }}",
                    "end": "{{ item.end.isoformat() }}",
                    "value": {{ item.value }}
                  }{% if not loop.last %},{% endif %}
                {% endfor %}
              {% else %}
                {% set hourly = raw | groupby('start.hour') %}
                {% for hour_group in hourly %}
                  {% set values = hour_group.list | map(attribute='value') | list %}
                  {% set hour_start = hour_group.list[0].start.replace(minute=0, second=0, microsecond=0) %}
                  {% set hour_end = hour_start + timedelta(hours=1) %}
                  {
                    "start": "{{ hour_start.isoformat() }}",
                    "end": "{{ hour_end.isoformat() }}",
                    "value": {{ (values | sum / values | count) | round(5) }}
                  }{% if not loop.last %},{% endif %}
                {% endfor %}
              {% endif %}
              ]
            {% else %}
              []
            {% endif %}
          raw_tomorrow: >-
            {% set nordpool = 'sensor.<NORDPOOL>' %}
            {% set use_15_min = is_state('input_boolean.dynamisch_15_minuten', 'on') %}
            {% set raw = state_attr(nordpool, 'raw_tomorrow') %}
            {% if raw %}
              [
              {% if use_15_min %}
                {% for item in raw %}
                  {
                    "start": "{{ item.start.isoformat() }}",
                    "end": "{{ item.end.isoformat() }}",
                    "value": {{ item.value }}
                  }{% if not loop.last %},{% endif %}
                {% endfor %}
              {% else %}
                {% set hourly = raw | groupby('start.hour') %}
                {% for hour_group in hourly %}
                  {% set values = hour_group.list | map(attribute='value') | list %}
                  {% set hour_start = hour_group.list[0].start.replace(minute=0, second=0, microsecond=0) %}
                  {% set hour_end = hour_start + timedelta(hours=1) %}
                  {
                    "start": "{{ hour_start.isoformat() }}",
                    "end": "{{ hour_end.isoformat() }}",
                    "value": {{ (values | sum / values | count) | round(5) }}
                  }{% if not loop.last %},{% endif %}
                {% endfor %}
              {% endif %}
              ]
            {% else %}
              []
            {% endif %}

      - name: "Dynamisch Spread Indicatie"
        unique_id: dynamisch_spread_indicatie
        icon: mdi:percent-box
        unit_of_measurement: "%"
        state: >
          {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
          {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
          {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
          {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
          
          {% if prijzen is iterable %}
            {% set ns = namespace(goedkoopste_uren=[], duurste_uren=[]) %}
            {% if handmatige | length > 0 %}
              {% for item in handmatige.split(';') %}
                {% set type = item[0] %}
                {% set tijd = item[1:] %}
                {% for uur in prijzen %}
                  {% set dt_start = uur.start | as_datetime %}
                  {% if dt_start.strftime('%H:%M') == tijd %}
                    {% if type == 'G' %}
                      {% set ns.goedkoopste_uren = ns.goedkoopste_uren + [uur] %}
                    {% elif type == 'D' %}
                      {% set ns.duurste_uren = ns.duurste_uren + [uur] %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% endfor %}
            {% else %}
              {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
              {% set ns.goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
              {% if aantal_duur > 0 %}
                {% set ns.duurste_uren = prijzen_per_uur[-aantal_duur:] %}
              {% else %}
                {% set goedkope_starttijden = ns.goedkoopste_uren | map(attribute='start') | list %}
                {% set ns.duurste_uren = prijzen | rejectattr('start', 'in', goedkope_starttijden) | list %}
              {% endif %}
            {% endif %}

            {% if ns.goedkoopste_uren | count > 0 and ns.duurste_uren | count > 0 %}
              {% set avg_goedkoop = ns.goedkoopste_uren | map(attribute='value') | sum / ns.goedkoopste_uren | count %}
              {% set avg_duur = ns.duurste_uren | map(attribute='value') | sum / ns.duurste_uren | count %}
              {% set spread_pct = ((avg_duur - avg_goedkoop) / avg_goedkoop) * 100 %}
              {{ spread_pct | round(1) }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        attributes:
          handmatige_periode: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(goedkoopste=[], duurste=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% set type = item[0] %}
                  {% set tijd = item[1:] %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% if type == 'G' %}
                        {% set ns.goedkoopste = ns.goedkoopste + [(type ~ dt_start.strftime('%H:%M'))] %}
                      {% elif type == 'D' %}
                        {% set ns.duurste = ns.duurste + [(type ~ dt_start.strftime('%H:%M'))] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
                {% set dure_uren = prijzen_per_uur[-aantal_duur:] if aantal_duur > 0 else prijzen | rejectattr('start', 'in', goedkoopste_uren | map(attribute='start') | list) | list %}
                {% for uur in goedkoopste_uren %}
                  {% set tijd = uur.start | as_datetime %}
                  {% set ns.goedkoopste = ns.goedkoopste + ['G' ~ tijd.strftime('%H:%M')] %}
                {% endfor %}
                {% for uur in dure_uren %}
                  {% set tijd = uur.start | as_datetime %}
                  {% set ns.duurste = ns.duurste + ['D' ~ tijd.strftime('%H:%M')] %}
                {% endfor %}
              {% endif %}
              {{ (ns.duurste + ns.goedkoopste) | join(';') }}
            {% else %}
              ""
            {% endif %}
          goedkoopste_periode: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          duurste_periode: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkope_starttijden = prijzen_per_uur[:aantal_goedkoop] | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set ns.uren = prijzen | rejectattr('start', 'in', goedkope_starttijden) | list %}
                {% endif %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          gemiddelde_goedkoop: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          gemiddelde_duur: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkope_starttijden = prijzen_per_uur[:aantal_goedkoop] | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set ns.uren = prijzen | rejectattr('start', 'in', goedkope_starttijden) | list %}
                {% endif %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          spread_berekening: >
            (gemiddeld duur - goedkoop) / goedkoop × 100

      - name: "Dynamisch Spread Indicatie NOM"
        unique_id: dynamisch_spread_indicatie_NOM
        icon: mdi:percent-box
        unit_of_measurement: "%"
        state: >
          {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
          {% set duurste_prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'duurste_na_eerste_goedkope') %}
          {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
          {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
          {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
          {% set ns = namespace(goedkoopste_uren=[], duurste_uren=[]) %}

          {% if prijzen is iterable and duurste_prijzen is iterable %}
            {% if handmatige | length > 0 %}
              {% for item in handmatige.split(';') %}
                {% set type = item[0] %}
                {% set tijd = item[1:] %}
                {% if type == 'G' %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% set ns.goedkoopste_uren = ns.goedkoopste_uren + [uur] %}
                    {% endif %}
                  {% endfor %}
                {% elif type == 'D' %}
                  {% for uur in duurste_prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% set ns.duurste_uren = ns.duurste_uren + [uur] %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
            {% else %}
              {% set ns.goedkoopste_uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% set duurste_sorted = duurste_prijzen | sort(attribute='value', reverse=true) %}
              {% if aantal_duur > 0 %}
                {% set ns.duurste_uren = duurste_sorted[:aantal_duur] %}
              {% else %}
                {% set ns.duurste_uren = duurste_sorted %}
              {% endif %}
            {% endif %}

            {% if ns.goedkoopste_uren | count > 0 and ns.duurste_uren | count > 0 %}
              {% set avg_goedkoop = ns.goedkoopste_uren | map(attribute='value') | sum / ns.goedkoopste_uren | count %}
              {% set avg_duur = ns.duurste_uren | map(attribute='value') | sum / ns.duurste_uren | count %}
              {% set spread_pct = ((avg_duur - avg_goedkoop) / avg_goedkoop) * 100 %}
              {{ spread_pct | round(1) }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        attributes:
          goedkoopste_uren: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}

            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          duurste_uren: >
            {% set duurste_prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'duurste_na_eerste_goedkope') %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}

            {% if duurste_prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in duurste_prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = duurste_prijzen | sort(attribute='value', reverse=true) %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = ns.uren[:aantal_duur] %}
                {% endif %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          gemiddelde_goedkoop: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}

            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          gemiddelde_duur: >
            {% set duurste_prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'duurste_na_eerste_goedkope') %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}

            {% if duurste_prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in duurste_prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = duurste_prijzen | sort(attribute='value', reverse=true) %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = ns.uren[:aantal_duur] %}
                {% endif %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          spread_berekening: >
            (gemiddeld duur - goedkoop) / goedkoop × 100

      - name: "Dynamisch Spread Indicatie Morgen"
        unique_id: dynamisch_spread_indicatie_morgen
        icon: mdi:percent-box
        unit_of_measurement: "%"
        state: >
          {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
          {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
          {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}
          {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
          
          {% if prijzen is iterable %}
            {% set ns = namespace(goedkoopste_uren=[], duurste_uren=[]) %}
            {% if handmatige | length > 0 %}
              {% for item in handmatige.split(';') %}
                {% set type = item[0] %}
                {% set tijd = item[1:] %}
                {% for uur in prijzen %}
                  {% set dt_start = uur.start | as_datetime %}
                  {% if dt_start.strftime('%H:%M') == tijd %}
                    {% if type == 'G' %}
                      {% set ns.goedkoopste_uren = ns.goedkoopste_uren + [uur] %}
                    {% elif type == 'D' %}
                      {% set ns.duurste_uren = ns.duurste_uren + [uur] %}
                    {% endif %}
                  {% endif %}
                {% endfor %}
              {% endfor %}
            {% else %}
              {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
              {% set ns.goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
              {% if aantal_duur > 0 %}
                {% set ns.duurste_uren = prijzen_per_uur[-aantal_duur:] %}
              {% else %}
                {% set goedkope_starttijden = ns.goedkoopste_uren | map(attribute='start') | list %}
                {% set ns.duurste_uren = prijzen | rejectattr('start', 'in', goedkope_starttijden) | list %}
              {% endif %}
            {% endif %}
            {% if ns.goedkoopste_uren | count > 0 and ns.duurste_uren | count > 0 %}
              {% set avg_goedkoop = ns.goedkoopste_uren | map(attribute='value') | sum / ns.goedkoopste_uren | count %}
              {% set avg_duur = ns.duurste_uren | map(attribute='value') | sum / ns.duurste_uren | count %}
              {% set spread_pct = ((avg_duur - avg_goedkoop) / avg_goedkoop) * 100 %}
              {{ spread_pct | round(1) }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        attributes:
          handmatige_periode: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(goedkoopste=[], duurste=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% set type = item[0] %}
                  {% set tijd = item[1:] %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% if type == 'G' %}
                        {% set ns.goedkoopste = ns.goedkoopste + ['G' ~ dt_start.strftime('%H:%M')] %}
                      {% elif type == 'D' %}
                        {% set ns.duurste = ns.duurste + ['D' ~ dt_start.strftime('%H:%M')] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
                {% set dure_uren = prijzen_per_uur[-aantal_duur:] if aantal_duur > 0 else prijzen | rejectattr('start', 'in', goedkoopste_uren | map(attribute='start') | list) | list %}
                {% for uur in goedkoopste_uren %}
                  {% set tijd = uur.start | as_datetime %}
                  {% set ns.goedkoopste = ns.goedkoopste + ['G' ~ tijd.strftime('%H:%M')] %}
                {% endfor %}
                {% for uur in dure_uren %}
                  {% set tijd = uur.start | as_datetime %}
                  {% set ns.duurste = ns.duurste + ['D' ~ tijd.strftime('%H:%M')] %}
                {% endfor %}
              {% endif %}
              {{ (ns.duurste + ns.goedkoopste) | join(';') }}
            {% else %}
              ""
            {% endif %}
          goedkoopste_periode: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          duurste_periode: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkope_starttijden = prijzen_per_uur[:aantal_goedkoop] | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set ns.uren = prijzen | rejectattr('start', 'in', goedkope_starttijden) | list %}
                {% endif %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          gemiddelde_goedkoop: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          gemiddelde_duur: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkope_starttijden = prijzen_per_uur[:aantal_goedkoop] | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set ns.uren = prijzen | rejectattr('start', 'in', goedkope_starttijden) | list %}
                {% endif %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          spread_berekening: >
            (gemiddeld duur - goedkoop) / goedkoop × 100

      - name: "Dynamisch Spread Indicatie NOM Morgen"
        unique_id: dynamisch_spread_indicatie_nom_morgen
        icon: mdi:percent-box
        unit_of_measurement: "%"
        state: >
          {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
          {% set duurste_prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'duurste_na_eerste_goedkope_morgen') %}
          {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
          {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}
          {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
          {% set ns = namespace(goedkoopste_uren=[], duurste_uren=[]) %}

          {% if prijzen is iterable and duurste_prijzen is iterable %}
            {% if handmatige | length > 0 %}
              {% for item in handmatige.split(';') %}
                {% set type = item[0] %}
                {% set tijd = item[1:] %}
                {% if type == 'G' %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% set ns.goedkoopste_uren = ns.goedkoopste_uren + [uur] %}
                    {% endif %}
                  {% endfor %}
                {% elif type == 'D' %}
                  {% for uur in duurste_prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% set ns.duurste_uren = ns.duurste_uren + [uur] %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
            {% else %}
              {% set ns.goedkoopste_uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% set duurste_sorted = duurste_prijzen | sort(attribute='value', reverse=true) %}
              {% if aantal_duur > 0 %}
                {% set ns.duurste_uren = duurste_sorted[:aantal_duur] %}
              {% else %}
                {% set ns.duurste_uren = duurste_sorted %}
              {% endif %}
            {% endif %}

            {% if ns.goedkoopste_uren | count > 0 and ns.duurste_uren | count > 0 %}
              {% set avg_goedkoop = ns.goedkoopste_uren | map(attribute='value') | sum / ns.goedkoopste_uren | count %}
              {% set avg_duur = ns.duurste_uren | map(attribute='value') | sum / ns.duurste_uren | count %}
              {% set spread_pct = ((avg_duur - avg_goedkoop) / avg_goedkoop) * 100 %}
              {{ spread_pct | round(1) }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        attributes:
          goedkoopste_periode: > 
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_tomorrow') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          duurste_periode: > 
            {% set duurste_prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'duurste_na_eerste_goedkope_morgen') %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(uren=[]) %}
            {% if duurste_prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in duurste_prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = duurste_prijzen | sort(attribute='value', reverse=true) %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = ns.uren[:aantal_duur] %}
                {% endif %}
              {% endif %}
              [
              {% for uur in ns.uren %}
                "{{ (uur.start | as_datetime).strftime('%H:%M') }} - €{{ '%.4f' | format(uur.value) }}"
                {% if not loop.last %}, {% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}
          gemiddelde_goedkoop: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set ns = namespace(uren=[]) %}
            {% if prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'G' %}
                    {% set tijd = item[1:] %}
                    {% for uur in prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = (prijzen | sort(attribute='value'))[:aantal_goedkoop] %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          gemiddelde_duur: > 
            {% set duurste_prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'duurste_na_eerste_goedkope_morgen') %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set ns = namespace(uren=[]) %}
            {% if duurste_prijzen is iterable %}
              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% if item[0] == 'D' %}
                    {% set tijd = item[1:] %}
                    {% for uur in duurste_prijzen %}
                      {% set dt_start = uur.start | as_datetime %}
                      {% if dt_start.strftime('%H:%M') == tijd %}
                        {% set ns.uren = ns.uren + [uur] %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set ns.uren = duurste_prijzen | sort(attribute='value', reverse=true) %}
                {% if aantal_duur > 0 %}
                  {% set ns.uren = ns.uren[:aantal_duur] %}
                {% endif %}
              {% endif %}
              {% if ns.uren | count > 0 %}
                {% set avg = ns.uren | map(attribute='value') | sum / ns.uren | count %}
                €{{ '%.4f' | format(avg) }}
              {% else %}
                n.v.t.
              {% endif %}
            {% else %}
              n.v.t.
            {% endif %}
          spread_berekening: >
            (gemiddeld duur - goedkoop) / goedkoop × 100

      - name: "Dynamisch Duurste Periode"
        unique_id: dynamisch_duurste_periode
        icon: mdi:progress-clock
        state: >
          {% set prijzen = state_attr('sensor.dynamisch_nordpool', 'raw_today') %}
          {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
          {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
          {% if prijzen is iterable and aantal_duur > 0 %}
            {% set ns = namespace(dure_starttijden=[]) %}
            
            {% if handmatige | length > 0 %}
              {% for item in handmatige.split(';') %}
                {% set type = item[0] %}
                {% set tijd = item[1:] %}
                {% if type == 'D' %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% set ns.dure_starttijden = ns.dure_starttijden + [uur.start] %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
            {% else %}
              {% set prijzen_sorted = prijzen | sort(attribute='value') %}
              {% set duurste_periodes = prijzen_sorted[-aantal_duur:] %}
              {% set ns.dure_starttijden = duurste_periodes | map(attribute='start') | list %}
            {% endif %}

            {% set nu = now().astimezone() %}
            {% set in_duur_blok = prijzen
              | selectattr('start', 'in', ns.dure_starttijden)
              | selectattr('start', 'le', nu.isoformat())
              | selectattr('end', 'gt', nu.isoformat())
              | list %}

            {% if in_duur_blok | length > 0 %}
              Ja
            {% else %}
              Nee
            {% endif %}
          {% else %}
            Onbekend
          {% endif %}
        attributes:
          raw_today: >
            {% set prijzen = state_attr('sensor.dynamisch_goedkoopste_periode', 'raw_today') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% if prijzen is iterable %}
              {% set ns = namespace(goedkope_starttijden=[], dure_starttijden=[]) %}

              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% set type = item[0] %}
                  {% set tijd = item[1:] %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% if type == 'G' %}
                        {% set ns.goedkope_starttijden = ns.goedkope_starttijden + [uur.start] %}
                      {% elif type == 'D' %}
                        {% set ns.dure_starttijden = ns.dure_starttijden + [uur.start] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
                {% set ns.goedkope_starttijden = goedkoopste_uren | map(attribute='start') | list %}

                {% if aantal_duur > 0 %}
                  {% set duurste_uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set duurste_uren = prijzen | rejectattr('start', 'in', ns.goedkope_starttijden) | list %}
                {% endif %}
                {% set ns.dure_starttijden = duurste_uren | map(attribute='start') | list %}
              {% endif %}

              [
              {% for uur in prijzen %}
                {
                  "start": "{{ uur.start }}",
                  "end": "{{ uur.end }}",
                  "value": {{ uur.value }},
                  "goedkoop": "{{ 'ja' if uur.start in ns.goedkope_starttijden else 'nee' }}",
                  "duur": "{{ 'ja' if uur.start in ns.dure_starttijden else 'nee' }}"
                }{% if not loop.last %},{% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}

      - name: "Dynamisch Goedkoopste Periode"
        unique_id: dynamisch_goedkoopste_periode
        icon: mdi:progress-clock
        state: >
          {% set prijzen = state_attr('sensor.dynamisch_nordpool', 'raw_today') %}
          {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
          {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
          {% set nu = now().astimezone() %}

          {% if prijzen is iterable %}
            {% set ns = namespace(goedkope_starttijden=[]) %}

            {% if handmatige | length > 0 %}
              {% for item in handmatige.split(';') %}
                {% set type = item[0] %}
                {% set tijd = item[1:] %}
                {% if type == 'G' %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% set ns.goedkope_starttijden = ns.goedkope_starttijden + [uur.start] %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
            {% else %}
              {% set prijzen_sorted = prijzen | sort(attribute='value') %}
              {% set goedkoopste_periodes = prijzen_sorted[:aantal_goedkoop] %}
              {% set ns.goedkope_starttijden = goedkoopste_periodes | map(attribute='start') | list %}
            {% endif %}

            {% set in_goedkoop_blok = prijzen 
              | selectattr('start', 'in', ns.goedkope_starttijden) 
              | selectattr('start', 'le', nu.isoformat()) 
              | selectattr('end', 'gt', nu.isoformat()) 
              | list %}

            {% if in_goedkoop_blok | length > 0 %}
              Ja
            {% else %}
              Nee
            {% endif %}
          {% else %}
            Onbekend
          {% endif %}
        attributes:
          raw_today: >
            {% set prijzen = state_attr('sensor.dynamisch_nordpool', 'raw_today') %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}

            {% if prijzen is iterable %}
              {% set ns = namespace(goedkope_starttijden=[], dure_starttijden=[]) %}

              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% set type = item[0] %}
                  {% set tijd = item[1:] %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% if type == 'G' %}
                        {% set ns.goedkope_starttijden = ns.goedkope_starttijden + [uur.start] %}
                      {% elif type == 'D' %}
                        {% set ns.dure_starttijden = ns.dure_starttijden + [uur.start] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
                {% set ns.goedkope_starttijden = goedkoopste_uren | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set duurste_uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set duurste_uren = prijzen | rejectattr('start', 'in', ns.goedkope_starttijden) | list %}
                {% endif %}
                {% set ns.dure_starttijden = duurste_uren | map(attribute='start') | list %}
              {% endif %}

              [
              {% for uur in prijzen %}
                {
                  "start": "{{ uur.start }}",
                  "end": "{{ uur.end }}",
                  "value": {{ uur.value }},
                  "goedkoop": "{{ 'ja' if uur.start in ns.goedkope_starttijden else 'nee' }}",
                  "duur": "{{ 'ja' if uur.start in ns.dure_starttijden else 'nee' }}"
                }{% if not loop.last %},{% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}

          raw_tomorrow: >
            {% set prijzen = state_attr('sensor.dynamisch_nordpool', 'raw_tomorrow') %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}

            {% if prijzen is iterable %}
              {% set ns = namespace(goedkope_starttijden=[], dure_starttijden=[]) %}

              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% set type = item[0] %}
                  {% set tijd = item[1:] %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% if type == 'G' %}
                        {% set ns.goedkope_starttijden = ns.goedkope_starttijden + [uur.start] %}
                      {% elif type == 'D' %}
                        {% set ns.dure_starttijden = ns.dure_starttijden + [uur.start] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
                {% set ns.goedkope_starttijden = goedkoopste_uren | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set duurste_uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set duurste_uren = prijzen | rejectattr('start', 'in', ns.goedkope_starttijden) | list %}
                {% endif %}
                {% set ns.dure_starttijden = duurste_uren | map(attribute='start') | list %}
              {% endif %}

              [
              {% for uur in prijzen %}
                {
                  "start": "{{ uur.start }}",
                  "end": "{{ uur.end }}",
                  "value": {{ uur.value }},
                  "goedkoop": "{{ 'ja' if uur.start in ns.goedkope_starttijden else 'nee' }}",
                  "duur": "{{ 'ja' if uur.start in ns.dure_starttijden else 'nee' }}"
                }{% if not loop.last %},{% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}

          duurste_na_eerste_goedkope: >
            {% set prijzen = state_attr('sensor.dynamisch_nordpool', 'raw_today') %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode') | int %}

            {% if prijzen is iterable %}
              {% set ns = namespace(goedkope_starttijden=[], dure_starttijden=[]) %}

              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% set type = item[0] %}
                  {% set tijd = item[1:] %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% if type == 'G' %}
                        {% set ns.goedkope_starttijden = ns.goedkope_starttijden + [uur.start] %}
                      {% elif type == 'D' %}
                        {% set ns.dure_starttijden = ns.dure_starttijden + [uur.start] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
                {% set ns.goedkope_starttijden = goedkoopste_uren | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set duurste_uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set duurste_uren = prijzen | rejectattr('start', 'in', ns.goedkope_starttijden) | list %}
                {% endif %}
                {% set ns.dure_starttijden = duurste_uren | map(attribute='start') | list %}
              {% endif %}

              {% set eerste_goedkoop = ns.goedkope_starttijden | map('as_datetime') | sort | first %}

              [
              {% for uur in prijzen if uur.start in ns.dure_starttijden and (uur.start | as_datetime > eerste_goedkoop) %}
                {
                  "start": "{{ uur.start }}",
                  "end": "{{ uur.end }}",
                  "value": {{ uur.value }},
                  "goedkoop": "{{ 'ja' if uur.start in ns.goedkope_starttijden else 'nee' }}",
                  "duur": "ja"
                }{% if not loop.last %},{% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}

          duurste_na_eerste_goedkope_morgen: >
            {% set prijzen = state_attr('sensor.dynamisch_nordpool', 'raw_tomorrow') %}
            {% set handmatige = states('input_text.dynamisch_handmatige_periode_morgen') %}
            {% set aantal_goedkoop = states('input_number.dynamisch_goedkoopste_x_periode_morgen') | int %}
            {% set aantal_duur = states('input_number.dynamisch_duurste_x_periode_morgen') | int %}

            {% if prijzen is iterable %}
              {% set ns = namespace(goedkope_starttijden=[], dure_starttijden=[]) %}

              {% if handmatige | length > 0 %}
                {% for item in handmatige.split(';') %}
                  {% set type = item[0] %}
                  {% set tijd = item[1:] %}
                  {% for uur in prijzen %}
                    {% set dt_start = uur.start | as_datetime %}
                    {% if dt_start.strftime('%H:%M') == tijd %}
                      {% if type == 'G' %}
                        {% set ns.goedkope_starttijden = ns.goedkope_starttijden + [uur.start] %}
                      {% elif type == 'D' %}
                        {% set ns.dure_starttijden = ns.dure_starttijden + [uur.start] %}
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% else %}
                {% set prijzen_per_uur = prijzen | sort(attribute='value') %}
                {% set goedkoopste_uren = prijzen_per_uur[:aantal_goedkoop] %}
                {% set ns.goedkope_starttijden = goedkoopste_uren | map(attribute='start') | list %}
                {% if aantal_duur > 0 %}
                  {% set duurste_uren = prijzen_per_uur[-aantal_duur:] %}
                {% else %}
                  {% set duurste_uren = prijzen | rejectattr('start', 'in', ns.goedkope_starttijden) | list %}
                {% endif %}
                {% set ns.dure_starttijden = duurste_uren | map(attribute='start') | list %}
              {% endif %}

              {% set eerste_goedkoop = ns.goedkope_starttijden | map('as_datetime') | sort | first %}

              [
              {% for uur in prijzen if uur.start in ns.dure_starttijden and (uur.start | as_datetime > eerste_goedkoop) %}
                {
                  "start": "{{ uur.start }}",
                  "end": "{{ uur.end }}",
                  "value": {{ uur.value }},
                  "goedkoop": "{{ 'ja' if uur.start in ns.goedkope_starttijden else 'nee' }}",
                  "duur": "ja"
                }{% if not loop.last %},{% endif %}
              {% endfor %}
              ]
            {% else %}
              []
            {% endif %}

      - name: "Zendure 2400 AC Efficiëntie Export"
        unique_id: zendure_2400_ac_efficientie_export
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:percent-box
        state: >
          {% set ac = states('sensor.zendure_2400_ac_vermogen_export') | float(0) %}
          {% set dc = states('sensor.zendure_2400_ac_vermogen_export_dc') | float(0) %}
          {% if ac > 0 and dc > 0 %}
            {% set efficiency = (ac / dc) * 100 %}
            {{ [0, [efficiency, 100] | min] | max | round(1) }}
          {% else %}
            0
          {% endif %}

      - name: "Zendure 2400 AC Efficiëntie Import"
        unique_id: zendure_2400_ac_efficientie_import
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:percent-box
        state: >
          {% set ac = states('sensor.zendure_2400_ac_vermogen_import') | float(0) %}
          {% set dc = states('sensor.zendure_2400_ac_vermogen_import_dc') | float(0) %}
          {% if ac > 0 and dc > 0 %}
            {% set efficiency = (dc / ac) * 100 %}
            {{ [0, [efficiency, 100] | min] | max | round(1) }}
          {% else %}
            0
          {% endif %}

      - name: "Zendure 2400 AC Indicatie Beschikbare Energie"
        unique_id: Zendure_2400_AC_Indicatie_Beschikbare_Energie
        unit_of_measurement: "kWh"
        state_class: measurement
        device_class: energy
        state: >
          {% set laad = states('sensor.zendure_2400_ac_laadpercentage') | float(0) %}
          {% set min_laad = states('sensor.zendure_2400_ac_minimale_laadpercentage') | float(0) %}
          {% set aantal_batterijen = states('sensor.zendure_2400_ac_aantal_batterijen') | float(1) %}
          {% set capaciteit_per_batterij = 2.88 %}
          {% set totale_capaciteit = aantal_batterijen * capaciteit_per_batterij %}
          {% set bruikbaar_percentage = laad - min_laad %}

          {% if bruikbaar_percentage < 0 %}
            0
          {% else %}
            {{ (bruikbaar_percentage / 100 * totale_capaciteit) | round(2) }}
          {% endif %}
        icon: mdi:lightning-bolt-circle

      - name: "Zendure 2400 AC RTE Totaal"
        unique_id: Zendure_2400_AC_RTE_Totaal
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:percent-box
        state: >
          {% set energy_import = states('sensor.zendure_2400_ac_energie_import') | float(0) %}
          {% set energy_export = states('sensor.zendure_2400_ac_energie_export') | float(0) %}
          {% if energy_import > 0 %}
            {% set percentage = ((energy_export / energy_import) * 100) | round(2) %}
            {% if 0 <= percentage <= 100 %}
              {{ percentage }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}

rest:
  - resource: http://<IP-BATTERIJ>/properties/report
    scan_interval: 1
    sensor:
      - name: "Zendure 2400 AC Vermogen Import (DC)"
        unique_id: Zendure_2400_AC_Vermogen_Import_(DC)
        value_template: >
         {% set ns = namespace(total=0) %}
         {% for pack in value_json.packData %}
          {% if pack.state == 1 %}
          {% set ns.total = ns.total + (pack.power | int) %}
         {% endif %}
         {% endfor %}
         {{ ns.total }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power

      - name: "Zendure 2400 AC Vermogen Export (DC)"
        unique_id: Zendure_2400_AC_Vermogen_Export_(DC)
        value_template: >
         {% set ns = namespace(total=0) %}
         {% for pack in value_json.packData %}
          {% if pack.state == 2 %}
          {% set ns.total = ns.total + (pack.power | int) %}
         {% endif %}
         {% endfor %}
         {{ ns.total }}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power

      - name: "Zendure 2400 AC Vermogen Export"
        value_template: "{{ value_json['properties']['packInputPower'] | int }}"
        unique_id: Zendure_2400_AC_Vermogen_Export
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power

      - name: "Zendure 2400 AC Vermogen Import"
        value_template: "{{ (value_json['properties']['outputPackPower'] | int) }}"
        unique_id: Zendure_2400_AC_Vermogen_Import
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power

      - name: "Zendure 2400 AC Signaalsterkte"
        value_template: >
          {% set rssi = value_json['properties']['rssi'] | int(-100) %}
          {% if rssi >= -60 %}
            Uitstekend
          {% elif rssi >= -70 %}
            Goed
          {% elif rssi >= -80 %}
            Zwak
          {% else %}
            Slecht
          {% endif %}
        unique_id: Zendure_2400_AC_Signaalsterkte
        icon: mdi:wifi

      - name: "Zendure 2400 AC Batterij 1 Temperatuur"
        value_template: >
          {% set maxTemp = value_json['packData'][0]['maxTemp'] | int %}
          {{ (maxTemp - 2731) / 10.0 }}
        unique_id: Zendure_2400_AC_Batterij_1_Temperatuur
        unit_of_measurement: "°C"
        state_class: measurement
        device_class: temperature
        icon: mdi:thermometer

      - name: "Zendure 2400 AC Batterij 2 Temperatuur"
        value_template: >
          {% set maxTemp = value_json['packData'][1]['maxTemp'] | int %}
          {{ (maxTemp - 2731) / 10.0 }}
        unique_id: Zendure_2400_AC_Batterij_2_Temperatuur
        unit_of_measurement: "°C"
        state_class: measurement
        device_class: temperature
        icon: mdi:thermometer

      - name: "Zendure 2400 AC Batterij 3 Temperatuur"
        value_template: >
          {% set maxTemp = value_json['packData'][2]['maxTemp'] | int %}
          {{ (maxTemp - 2731) / 10.0 }}
        unique_id: Zendure_2400_AC_Batterij_3_Temperatuur
        unit_of_measurement: "°C"
        state_class: measurement
        device_class: temperature
        icon: mdi:thermometer

      - name: "Zendure 2400 AC Batterij 4 Temperatuur"
        value_template: >
          {% set maxTemp = value_json['packData'][3]['maxTemp'] | int %}
          {{ (maxTemp - 2731) / 10.0 }}
        unique_id: Zendure_2400_AC_Batterij_4_Temperatuur
        unit_of_measurement: "°C"
        state_class: measurement
        device_class: temperature
        icon: mdi:thermometer

      - name: "Zendure 2400 AC Batterij 5 Temperatuur"
        value_template: >
          {% set maxTemp = value_json['packData'][4]['maxTemp'] | int %}
          {{ (maxTemp - 2731) / 10.0 }}
        unique_id: Zendure_2400_AC_Batterij_5_Temperatuur
        unit_of_measurement: "°C"
        state_class: measurement
        device_class: temperature
        icon: mdi:thermometer

      - name: "Zendure 2400 AC Batterij 6 Temperatuur"
        value_template: >
          {% set maxTemp = value_json['packData'][5]['maxTemp'] | int %}
          {{ (maxTemp - 2731) / 10.0 }}
        unique_id: Zendure_2400_AC_Batterij_6_Temperatuur
        unit_of_measurement: "°C"
        state_class: measurement
        device_class: temperature
        icon: mdi:thermometer

      - name: "Zendure 2400 AC Vermogen Aansturing"
        value_template: >
          {% set opladen = value_json['properties']['outputPackPower'] | int %}
          {% set ontladen = - (value_json['properties']['packInputPower'] | int) %}
          {% if opladen != 0 %}
            {{ opladen }}
          {% else %}
            {{ ontladen }}
          {% endif %}
        unique_id: Zendure_2400_AC_Vermogen_Aansturing
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power

      - name: "Zendure 2400 AC Aantal Batterijen"
        value_template: "{{ value_json['properties']['packNum'] }}"
        unique_id: Zendure_2400_AC_Aantal_Batterijen
        icon: mdi:battery

      - name: "Zendure 2400 AC Opslagmodus"
        value_template: >
          {% set states = {1: "Opslaan in RAM", 0: "Opslaan in Flash"} %}
          {% set packState = value_json['properties']['smartMode'] | int %}
          {{ states.get(packState, "Onbekend") }}
        unique_id: Zendure_2400_AC_Opslagmodus
        icon: mdi:floppy

      - name: "Zendure 2400 AC Batterijspanning"
        value_template: "{{ (value_json['properties']['BatVolt'] | float / 100) | round(2) }}"
        unique_id: Zendure_2400_AC_Batterijspanning
        unit_of_measurement: "V"
        state_class: measurement
        device_class: voltage
        icon: mdi:sine-wave

      - name: "Zendure 2400 AC Resterende Ontlaad Tijd"
        value_template: >
         {% set vermogen_aansturing = states('sensor.zendure_2400_ac_vermogen_aansturing') | float(0) %}
         {% if vermogen_aansturing < 0 %}
         {% set total_minutes = value_json['properties']['remainOutTime'] | float(0) %}
         {% set hours = (total_minutes // 60) | int %}
         {% set minutes = (total_minutes % 60) | int %}
          {{ hours }}u {{ minutes }}m
         {% else %}
          Niet aan het ontladen
         {% endif %}
        icon: mdi:clock-time-eight-outline
        unique_id: zendure_2400_ac_resterende_ontlaad_tijd

      - name: "Zendure 2400 AC Omvormer Temperatuur"
        value_template: >
          {% set maxTemp = value_json['properties']['hyperTmp'] | int %}
          {{ (maxTemp - 2731) / 10.0 }}
        unique_id: Zendure_2400_AC_Omvormer_Temperatuur
        unit_of_measurement: "°C"
        state_class: measurement
        device_class: temperature
        icon: mdi:thermometer

      - name: "Zendure 2400 AC Laadpercentage"
        value_template: "{{ value_json['properties']['electricLevel'] }}"
        device_class: battery
        unit_of_measurement: "%"
        state_class: measurement
        unique_id: Zendure_2400_AC_Laadpercentage

      - name: "Zendure 2400 AC Minimale Laadpercentage"
        value_template: "{{ (value_json['properties']['minSoc'] | int / 10) | int }}"
        device_class: battery
        unit_of_measurement: "%"
        state_class: measurement
        unique_id: Zendure_2400_AC_Minimale_Laadpercentage
        icon: mdi:battery-high

      - name: "Zendure 2400 AC Maximale Laadpercentage"
        value_template: "{{ (value_json['properties']['socSet'] | int / 10) | int }}"
        device_class: battery
        unit_of_measurement: "%"
        state_class: measurement
        unique_id: Zendure_2400_AC_Maximale_Laadpercentage
        icon: mdi:battery-high

      - name: "Zendure 2400 AC Modus"
        value_template: >
          {% set states = {1: "Opladen", 2: "Ontladen"} %}
          {% set packState = value_json['properties']['acMode'] | int %}
          {{ states.get(packState, "Onbekend") }}
        unique_id: Zendure_2400_AC_Modus
        icon: mdi:battery-charging-wireless

      - name: "Zendure 2400 AC Error"
        value_template: >
          {% set states = {0: "Geen meldingen", 1: "Zie Zendure APP"} %}
          {% set packState = value_json['properties']['is_error'] | int %}
          {{ states.get(packState, "Onbekend") }}
        unique_id: Zendure_2400_AC_Error
        icon: mdi:battery-alert

      - name: "Zendure 2400 AC SOC Status"
        value_template: >
          {% set states = {0: "Goed", 1: "Kalibreren"} %}
          {% set packState = value_json['properties']['socStatus'] | int %}
          {{ states.get(packState, "Onbekend") }}
        unique_id: Zendure_2400_AC_SOC_Status
        icon: mdi:battery-heart-variant

      - name: "Zendure 2400 AC Ingesteld Ontlaadvermogen"
        value_template: "{{ value_json['properties']['outputLimit'] }}"
        unique_id: Zendure_2400_AC_Ingesteld_Ontlaadvermogen
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power

      - name: "Zendure 2400 AC Ingesteld Oplaadvermogen"
        value_template: "{{ value_json['properties']['inputLimit'] }}"
        unique_id: Zendure_2400_AC_Ingesteld_Oplaadvermogen
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
    
  - resource: http://<IP-HOMEWIZARD-P1>/api/v1/data   # IP-adres van je Homewizard P1 voor V1 API
    scan_interval: 1
    sensor:
      - name: "P1 Aansturing API v1"
        value_template: "{{ value_json.active_power_w | float }}"
        unique_id: P1_Aansturing_API_V1
        unit_of_measurement: "W"
        device_class: power
 
rest_command:
  zendure_opslaan_in_ram:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"smartMode": 1 }}'

  zendure_snel_laden:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"acMode": 1, "inputLimit": 2400 }}'

  zendure_stop_met_laden:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"acMode": 1, "inputLimit": 0 }}'

  zendure_x_laden:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"acMode": 1, "inputLimit": {{inputLimit}} }}'

  zendure_x_laden_balanceren:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"inputLimit": {{inputLimit}} }}'

  zendure_x_ontladen:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"acMode": 2, "outputLimit": {{outputLimit}} }}'

  zendure_x_ontladen_balanceren:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"outputLimit": {{outputLimit}} }}'

  zendure_snel_ontladen:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"acMode": 2, "outputLimit": 2400 }}'

  zendure_stop_met_ontladen:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"acMode": 2, "outputLimit": 0 }}'

  zendure_stop_met_alles:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"outputLimit": 0, "inputLimit": 0 }}'

  zendure_standby:
    url: http://<IP-BATTERIJ>/properties/write
    method: POST
    payload: '{"sn":"<SERIAL-2400AC>","properties":{"smartMode": 0, "outputLimit": 0, "inputLimit": 0 }}'
